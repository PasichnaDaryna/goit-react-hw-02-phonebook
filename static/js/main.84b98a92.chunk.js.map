{"version":3,"sources":["components/Container/Container.js","components/Form/Form.js","components/Filter/Filter.js","components/contactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["Container","children","className","Form","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","this","id","htmlFor","type","onChange","placeholder","Component","Filter","ContactList","contacts","onDeleteContact","map","onClick","App","filter","addContact","contact","find","toLowerCase","alert","trim","test","deleteContact","contactId","changeFilter","getVisibleContacts","normalizedFilter","includes","visibleContacts","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84b98a92.chunk.js","sourcesContent":["import T from 'prop-types';\r\nimport '../Container/Container.css'\r\n\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: T.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport T from 'prop-types';\nimport shortid from 'shortid';\nimport '../Form/Form.css';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form id=\"contact\" onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            className=\"input-field\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n            placeholder=\"John Dows\"\n          />\n        </label>\n        <br />\n        <label htmlFor={this.numberInputId}>\n          Phone number\n          <input\n            className=\"input-field\"\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n            placeholder=\"+38098 112 31 23\"\n          />\n        </label>\n\n        <button type=\"submit\" className=\"submit-button\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\nForm.propTypes = {\n  onSubmit: T.func.isRequired,\n};\n\nexport default Form;\n","import T from 'prop-types';\nimport '../Filter/Filter.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: T.string,\n  onChange: T.func.isRequired,\n};\n\nexport default Filter;\n","import T from 'prop-types';\nimport '../contactList/ContactList.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className=\"contact-list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: T.arrayOf(\n    T.shape({\n      id: T.string.isRequired,\n      name: T.string.isRequired,\n      number: T.string.isRequired,\n    }),\n  ),\n  onDeleteContact: T.func.isRequired,\n};\n\nexport default ContactList;\n","import './App.css';\nimport { Component } from 'react';\nimport shortid from 'shortid';\nimport Container from './components/Container/Container';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter.js';\nimport ContactList from './components/contactList/ContactList';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    const { contacts } = this.state;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts.`);\n    } else if (name.trim() === '' || number.trim() === '') {\n      alert(\"Enter the contact's name and number phone!\");\n    } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\n      alert('Enter the correct number phone!');\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        {contacts.length > 1 && (\n          <Filter value={filter} onChange={this.changeFilter} />\n        )}\n        {contacts.length > 0 ? (\n          <ContactList\n            contacts={visibleContacts}\n            onDeleteContact={this.deleteContact}\n          />\n        ) : (\n          <p>Your phonebook is empty. Please add contact.</p>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}